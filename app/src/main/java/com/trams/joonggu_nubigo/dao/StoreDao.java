package com.trams.joonggu_nubigo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.trams.joonggu_nubigo.dao.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE".
*/
public class StoreDao extends AbstractDao<Store, Long> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property ServiceHours = new Property(3, String.class, "serviceHours", false, "SERVICE_HOURS");
        public final static Property Holiday = new Property(4, String.class, "holiday", false, "HOLIDAY");
        public final static Property BuildingForm = new Property(5, String.class, "buildingForm", false, "BUILDING_FORM");
        public final static Property Floor = new Property(6, String.class, "floor", false, "FLOOR");
        public final static Property FacilityList = new Property(7, String.class, "facilityList", false, "FACILITY_LIST");
        public final static Property Representative = new Property(8, String.class, "representative", false, "REPRESENTATIVE");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
        public final static Property MonitoringDate = new Property(11, java.util.Date.class, "monitoringDate", false, "MONITORING_DATE");
        public final static Property MonitoringMan = new Property(12, String.class, "monitoringMan", false, "MONITORING_MAN");
        public final static Property MonitoringManPhone = new Property(13, String.class, "monitoringManPhone", false, "MONITORING_MAN_PHONE");
        public final static Property FieldList = new Property(14, String.class, "fieldList", false, "FIELD_LIST");
        public final static Property ImageBaseAttach = new Property(15, String.class, "imageBaseAttach", false, "IMAGE_BASE_ATTACH");
        public final static Property ImageExtendAttach = new Property(16, String.class, "imageExtendAttach", false, "IMAGE_EXTEND_ATTACH");
        public final static Property Grade = new Property(17, String.class, "grade", false, "GRADE");
        public final static Property AccessibilityList = new Property(18, String.class, "accessibilityList", false, "ACCESSIBILITY_LIST");
        public final static Property Longitude = new Property(19, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(20, String.class, "latitude", false, "LATITUDE");
        public final static Property CreateDate = new Property(21, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(22, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property OtherInfo = new Property(23, String.class, "otherInfo", false, "OTHER_INFO");
        public final static Property IsDelete = new Property(24, Integer.class, "isDelete", false, "IS_DELETE");
        public final static Property CatId = new Property(25, long.class, "catId", false, "CAT_ID");
        public final static Property UserId = new Property(26, long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Store> category_StoresQuery;

    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"TAG\" TEXT," + // 2: tag
                "\"SERVICE_HOURS\" TEXT," + // 3: serviceHours
                "\"HOLIDAY\" TEXT," + // 4: holiday
                "\"BUILDING_FORM\" TEXT," + // 5: buildingForm
                "\"FLOOR\" TEXT," + // 6: floor
                "\"FACILITY_LIST\" TEXT," + // 7: facilityList
                "\"REPRESENTATIVE\" TEXT," + // 8: representative
                "\"PHONE\" TEXT," + // 9: phone
                "\"ADDRESS\" TEXT," + // 10: address
                "\"MONITORING_DATE\" INTEGER," + // 11: monitoringDate
                "\"MONITORING_MAN\" TEXT," + // 12: monitoringMan
                "\"MONITORING_MAN_PHONE\" TEXT," + // 13: monitoringManPhone
                "\"FIELD_LIST\" TEXT," + // 14: fieldList
                "\"IMAGE_BASE_ATTACH\" TEXT," + // 15: imageBaseAttach
                "\"IMAGE_EXTEND_ATTACH\" TEXT," + // 16: imageExtendAttach
                "\"GRADE\" TEXT," + // 17: grade
                "\"ACCESSIBILITY_LIST\" TEXT," + // 18: accessibilityList
                "\"LONGITUDE\" TEXT," + // 19: longitude
                "\"LATITUDE\" TEXT," + // 20: latitude
                "\"CREATE_DATE\" INTEGER," + // 21: createDate
                "\"UPDATE_DATE\" INTEGER," + // 22: updateDate
                "\"OTHER_INFO\" TEXT," + // 23: otherInfo
                "\"IS_DELETE\" INTEGER," + // 24: isDelete
                "\"CAT_ID\" INTEGER NOT NULL ," + // 25: catId
                "\"USER_ID\" INTEGER NOT NULL );"); // 26: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String serviceHours = entity.getServiceHours();
        if (serviceHours != null) {
            stmt.bindString(4, serviceHours);
        }
 
        String holiday = entity.getHoliday();
        if (holiday != null) {
            stmt.bindString(5, holiday);
        }
 
        String buildingForm = entity.getBuildingForm();
        if (buildingForm != null) {
            stmt.bindString(6, buildingForm);
        }
 
        String floor = entity.getFloor();
        if (floor != null) {
            stmt.bindString(7, floor);
        }
 
        String facilityList = entity.getFacilityList();
        if (facilityList != null) {
            stmt.bindString(8, facilityList);
        }
 
        String representative = entity.getRepresentative();
        if (representative != null) {
            stmt.bindString(9, representative);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        java.util.Date monitoringDate = entity.getMonitoringDate();
        if (monitoringDate != null) {
            stmt.bindLong(12, monitoringDate.getTime());
        }
 
        String monitoringMan = entity.getMonitoringMan();
        if (monitoringMan != null) {
            stmt.bindString(13, monitoringMan);
        }
 
        String monitoringManPhone = entity.getMonitoringManPhone();
        if (monitoringManPhone != null) {
            stmt.bindString(14, monitoringManPhone);
        }
 
        String fieldList = entity.getFieldList();
        if (fieldList != null) {
            stmt.bindString(15, fieldList);
        }
 
        String imageBaseAttach = entity.getImageBaseAttach();
        if (imageBaseAttach != null) {
            stmt.bindString(16, imageBaseAttach);
        }
 
        String imageExtendAttach = entity.getImageExtendAttach();
        if (imageExtendAttach != null) {
            stmt.bindString(17, imageExtendAttach);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(18, grade);
        }
 
        String accessibilityList = entity.getAccessibilityList();
        if (accessibilityList != null) {
            stmt.bindString(19, accessibilityList);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(20, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(21, latitude);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(22, createDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(23, updateDate.getTime());
        }
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(24, otherInfo);
        }
 
        Integer isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(25, isDelete);
        }
        stmt.bindLong(26, entity.getCatId());
        stmt.bindLong(27, entity.getUserId());
    }

    @Override
    protected void attachEntity(Store entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serviceHours
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // holiday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // buildingForm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // floor
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // facilityList
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // representative
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // monitoringDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // monitoringMan
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // monitoringManPhone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fieldList
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // imageBaseAttach
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // imageExtendAttach
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // grade
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // accessibilityList
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // longitude
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // latitude
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // createDate
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // updateDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // otherInfo
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // isDelete
            cursor.getLong(offset + 25), // catId
            cursor.getLong(offset + 26) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServiceHours(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHoliday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBuildingForm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFloor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFacilityList(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRepresentative(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMonitoringDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setMonitoringMan(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMonitoringManPhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFieldList(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setImageBaseAttach(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImageExtendAttach(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGrade(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAccessibilityList(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLongitude(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLatitude(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreateDate(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setUpdateDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setOtherInfo(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsDelete(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setCatId(cursor.getLong(offset + 25));
        entity.setUserId(cursor.getLong(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Store entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Store entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stores" to-many relationship of Category. */
    public List<Store> _queryCategory_Stores(long catId) {
        synchronized (this) {
            if (category_StoresQuery == null) {
                QueryBuilder<Store> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CatId.eq(null));
                category_StoresQuery = queryBuilder.build();
            }
        }
        Query<Store> query = category_StoresQuery.forCurrentThread();
        query.setParameter(0, catId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM STORE T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.\"CAT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"USER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Store loadCurrentDeep(Cursor cursor, boolean lock) {
        Store entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category categories = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(categories != null) {
            entity.setCategories(categories);
        }
        offset += daoSession.getCategoryDao().getAllColumns().length;

        User users = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(users != null) {
            entity.setUsers(users);
        }

        return entity;    
    }

    public Store loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Store> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Store> list = new ArrayList<Store>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Store> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Store> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
