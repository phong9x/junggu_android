package com.trams.joonggu_nubigo.dao;

import com.trams.joonggu_nubigo.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "STORE".
 */
public class Store {

    private long id;
    /** Not-null value. */
    private String name;
    private String tag;
    private String serviceHours;
    private String holiday;
    private String buildingForm;
    private String floor;
    private String facilityList;
    private String representative;
    private String phone;
    private String address;
    private java.util.Date monitoringDate;
    private String monitoringMan;
    private String monitoringManPhone;
    private String fieldList;
    private String imageBaseAttach;
    private String imageExtendAttach;
    private String grade;
    private String accessibilityList;
    private String longitude;
    private String latitude;
    private java.util.Date createDate;
    private java.util.Date updateDate;
    private String otherInfo;
    private Integer isDelete;
    private long catId;
    private long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StoreDao myDao;

    private Category categories;
    private Long categories__resolvedKey;

    private User users;
    private Long users__resolvedKey;


    public Store() {
    }

    public Store(long id) {
        this.id = id;
    }

    public Store(long id, String name, String tag, String serviceHours, String holiday, String buildingForm, String floor, String facilityList, String representative, String phone, String address, java.util.Date monitoringDate, String monitoringMan, String monitoringManPhone, String fieldList, String imageBaseAttach, String imageExtendAttach, String grade, String accessibilityList, String longitude, String latitude, java.util.Date createDate, java.util.Date updateDate, String otherInfo, Integer isDelete, long catId, long userId) {
        this.id = id;
        this.name = name;
        this.tag = tag;
        this.serviceHours = serviceHours;
        this.holiday = holiday;
        this.buildingForm = buildingForm;
        this.floor = floor;
        this.facilityList = facilityList;
        this.representative = representative;
        this.phone = phone;
        this.address = address;
        this.monitoringDate = monitoringDate;
        this.monitoringMan = monitoringMan;
        this.monitoringManPhone = monitoringManPhone;
        this.fieldList = fieldList;
        this.imageBaseAttach = imageBaseAttach;
        this.imageExtendAttach = imageExtendAttach;
        this.grade = grade;
        this.accessibilityList = accessibilityList;
        this.longitude = longitude;
        this.latitude = latitude;
        this.createDate = createDate;
        this.updateDate = updateDate;
        this.otherInfo = otherInfo;
        this.isDelete = isDelete;
        this.catId = catId;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStoreDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getServiceHours() {
        return serviceHours;
    }

    public void setServiceHours(String serviceHours) {
        this.serviceHours = serviceHours;
    }

    public String getHoliday() {
        return holiday;
    }

    public void setHoliday(String holiday) {
        this.holiday = holiday;
    }

    public String getBuildingForm() {
        return buildingForm;
    }

    public void setBuildingForm(String buildingForm) {
        this.buildingForm = buildingForm;
    }

    public String getFloor() {
        return floor;
    }

    public void setFloor(String floor) {
        this.floor = floor;
    }

    public String getFacilityList() {
        return facilityList;
    }

    public void setFacilityList(String facilityList) {
        this.facilityList = facilityList;
    }

    public String getRepresentative() {
        return representative;
    }

    public void setRepresentative(String representative) {
        this.representative = representative;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public java.util.Date getMonitoringDate() {
        return monitoringDate;
    }

    public void setMonitoringDate(java.util.Date monitoringDate) {
        this.monitoringDate = monitoringDate;
    }

    public String getMonitoringMan() {
        return monitoringMan;
    }

    public void setMonitoringMan(String monitoringMan) {
        this.monitoringMan = monitoringMan;
    }

    public String getMonitoringManPhone() {
        return monitoringManPhone;
    }

    public void setMonitoringManPhone(String monitoringManPhone) {
        this.monitoringManPhone = monitoringManPhone;
    }

    public String getFieldList() {
        return fieldList;
    }

    public void setFieldList(String fieldList) {
        this.fieldList = fieldList;
    }

    public String getImageBaseAttach() {
        return imageBaseAttach;
    }

    public void setImageBaseAttach(String imageBaseAttach) {
        this.imageBaseAttach = imageBaseAttach;
    }

    public String getImageExtendAttach() {
        return imageExtendAttach;
    }

    public void setImageExtendAttach(String imageExtendAttach) {
        this.imageExtendAttach = imageExtendAttach;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public String getAccessibilityList() {
        return accessibilityList;
    }

    public void setAccessibilityList(String accessibilityList) {
        this.accessibilityList = accessibilityList;
    }

    public String getLongitude() {
        return longitude;
    }

    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    public String getLatitude() {
        return latitude;
    }

    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public java.util.Date getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(java.util.Date updateDate) {
        this.updateDate = updateDate;
    }

    public String getOtherInfo() {
        return otherInfo;
    }

    public void setOtherInfo(String otherInfo) {
        this.otherInfo = otherInfo;
    }

    public Integer getIsDelete() {
        return isDelete;
    }

    public void setIsDelete(Integer isDelete) {
        this.isDelete = isDelete;
    }

    public long getCatId() {
        return catId;
    }

    public void setCatId(long catId) {
        this.catId = catId;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategories() {
        long __key = this.catId;
        if (categories__resolvedKey == null || !categories__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            Category categoriesNew = targetDao.load(__key);
            synchronized (this) {
                categories = categoriesNew;
            	categories__resolvedKey = __key;
            }
        }
        return categories;
    }

    public void setCategories(Category categories) {
        if (categories == null) {
            throw new DaoException("To-one property 'catId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categories = categories;
            catId = categories.getId();
            categories__resolvedKey = catId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getUsers() {
        long __key = this.userId;
        if (users__resolvedKey == null || !users__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User usersNew = targetDao.load(__key);
            synchronized (this) {
                users = usersNew;
            	users__resolvedKey = __key;
            }
        }
        return users;
    }

    public void setUsers(User users) {
        if (users == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.users = users;
            userId = users.getId();
            users__resolvedKey = userId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
