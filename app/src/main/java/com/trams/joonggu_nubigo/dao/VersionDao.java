package com.trams.joonggu_nubigo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trams.joonggu_nubigo.dao.Version;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VERSION".
*/
public class VersionDao extends AbstractDao<Version, Long> {

    public static final String TABLENAME = "VERSION";

    /**
     * Properties of entity Version.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property Etc = new Property(3, String.class, "etc", false, "ETC");
        public final static Property CreateDate = new Property(4, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(5, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    };


    public VersionDao(DaoConfig config) {
        super(config);
    }
    
    public VersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VERSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"STATUS\" TEXT NOT NULL ," + // 2: status
                "\"ETC\" TEXT," + // 3: etc
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 4: createDate
                "\"UPDATE_DATE\" INTEGER NOT NULL );"); // 5: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VERSION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Version entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getStatus());
 
        String etc = entity.getEtc();
        if (etc != null) {
            stmt.bindString(4, etc);
        }
        stmt.bindLong(5, entity.getCreateDate().getTime());
        stmt.bindLong(6, entity.getUpdateDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Version readEntity(Cursor cursor, int offset) {
        Version entity = new Version( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // etc
            new java.util.Date(cursor.getLong(offset + 4)), // createDate
            new java.util.Date(cursor.getLong(offset + 5)) // updateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Version entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setStatus(cursor.getString(offset + 2));
        entity.setEtc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdateDate(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Version entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Version entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
