package com.trams.joonggu_nubigo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trams.joonggu_nubigo.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Fullname = new Property(4, String.class, "fullname", false, "FULLNAME");
        public final static Property Role = new Property(5, int.class, "role", false, "ROLE");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Age = new Property(9, Integer.class, "age", false, "AGE");
        public final static Property Scrap = new Property(10, String.class, "scrap", false, "SCRAP");
        public final static Property CreateDate = new Property(11, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(12, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT NOT NULL ," + // 1: username
                "\"PASSWORD\" TEXT NOT NULL ," + // 2: password
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"FULLNAME\" TEXT," + // 4: fullname
                "\"ROLE\" INTEGER NOT NULL ," + // 5: role
                "\"SEX\" TEXT," + // 6: sex
                "\"PHONE\" TEXT," + // 7: phone
                "\"EMAIL\" TEXT," + // 8: email
                "\"AGE\" INTEGER," + // 9: age
                "\"SCRAP\" TEXT," + // 10: scrap
                "\"CREATE_DATE\" INTEGER NOT NULL ," + // 11: createDate
                "\"UPDATE_DATE\" INTEGER NOT NULL );"); // 12: updateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getPassword());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(5, fullname);
        }
        stmt.bindLong(6, entity.getRole());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(10, age);
        }
 
        String scrap = entity.getScrap();
        if (scrap != null) {
            stmt.bindString(11, scrap);
        }
        stmt.bindLong(12, entity.getCreateDate().getTime());
        stmt.bindLong(13, entity.getUpdateDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fullname
            cursor.getInt(offset + 5), // role
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // age
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // scrap
            new java.util.Date(cursor.getLong(offset + 11)), // createDate
            new java.util.Date(cursor.getLong(offset + 12)) // updateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFullname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRole(cursor.getInt(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAge(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setScrap(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdateDate(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
